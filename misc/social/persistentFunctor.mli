
    val mtx_call : unit -> (unit -> 'b) -> 'b Lwt.t

  module type CELT =
  sig
    (* Manipulated type *)
    type t

    (* Autogenerated functions *)
    val init : string -> (t, [ `RW ]) Orm.Db.t
    val get_by_id : id:[< `Eq of int64 ] -> (t, [< `RO | `RW ]) Orm.Db.t -> t
    val id : db:(t, [< `RO | `RW ]) Orm.Db.t -> t -> int64
    val get : (t -> bool) -> (t, [< `RO | `RW ]) Orm.Db.t -> t list
    val save : db:(t, [ `RW ]) Orm.Db.t -> t -> bool -> unit
    val delete : ?recursive:bool -> db:(t, [ `RW ]) Orm.Db.t -> t -> unit
    val search : db:(t, [ `RW ]) Orm.Db.t -> string -> string -> int64 list

(* Type-dependant functions, customized loaders
    val customs : (int64 -> t -> bool) array
*)
  end


  module Make : functor (C : CELT) ->
  sig
    type t = C.t
    val load : int64 -> t Lwt.t
    val load_all : unit -> t list Lwt.t
    val load_custom : (t -> bool) -> t list Lwt.t

    val save : t -> unit Lwt.t
    val delete : t -> unit Lwt.t
    val id : t -> int64

    val search : string -> string -> int64 list Lwt.t

(*
    val loaders : (int64 -> t list Lwt.t) array
    val filters : (int64 -> t -> bool) array
*)
    val make_custom : ('a -> t -> bool) -> 'a -> t list Lwt.t

  end



